#!/bin/bash

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_BOOLEAN([swap-extruder],[s],[Swap extruder position in Dreamer and Inventor machines],[off])
# ARG_OPTIONAL_BOOLEAN([flash],[f],[Flash the firmware directly after building the firmware],[off])
# ARG_POSITIONAL_SINGLE([machine],[Choose the printer type; available options: dreamer_nx,dreamer,inventor])
# ARG_OPTIONAL_BOOLEAN([verbose],[],[Turn on verbose mode],[])
# ARG_DEFAULTS_POS()
# ARG_HELP([Marlin firmware for Flashforge printers],[Script to build & flash Marlin v2 firmware on Flashforge printers])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='sfh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_machine=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_swap_extruder="off"
_arg_flash="off"
_arg_verbose="off"


print_help()
{
	printf '%s\n' "Marlin firmware for Flashforge printers"
	printf 'Usage: %s [-s|--(no-)swap-extruder] [-f|--(no-)flash] [--(no-)verbose] [-h|--help] <machine>\n' "$0"
	printf '\t%s\n' "<machine>: Choose the printer type; available options: dreamer_nx,dreamer,inventor"
	printf '\t%s\n' "-s, --swap-extruder, --no-swap-extruder: Swap extruder position in Dreamer and Inventor machines (off by default)"
	printf '\t%s\n' "-f, --flash, --no-flash: Flash the firmware directly after building the firmware (off by default)"
	printf '\t%s\n' "--verbose, --no-verbose: Turn on verbose mode (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\n%s\n' "Script to build & flash Marlin v2 firmware on Flashforge printers"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-s|--no-swap-extruder|--swap-extruder)
				_arg_swap_extruder="on"
				test "${1:0:5}" = "--no-" && _arg_swap_extruder="off"
				;;
			-s*)
				_arg_swap_extruder="on"
				_next="${_key##-s}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-s" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-f|--no-flash|--flash)
				_arg_flash="on"
				test "${1:0:5}" = "--no-" && _arg_flash="off"
				;;
			-f*)
				_arg_flash="on"
				_next="${_key##-f}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-f" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			--no-verbose|--verbose)
				_arg_verbose="on"
				test "${1:0:5}" = "--no-" && _arg_verbose="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'machine'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_machine "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# global variables
PRINTER_TYPE="$_arg_machine"
SWAP_EXTRUDER=$_arg_swap_extruder
FLASH_AFTER_BUILD=$_arg_flash
RELEASE_NAME="marlin_${PRINTER_TYPE}"
MARLIN_SOURCE_DIR=$PWD/Marlin
FF_ENC_DIR=$PWD/flashforge_firmware_tool
BUILD_DIR=$PWD/BUILD
CONFIG_FOLDER=$PWD/configs
FINAL_FW="${BUILD_DIR}/${RELEASE_NAME}.bin"
FLASHING_SCRIPT="$PWD/ff_flash_firmware.py"
MARLIN_VERSION="2.0.7.2"
# log levels
ERROR=1
if [ $_arg_verbose = on ]
then
   DEBUG=1
else
   DEBUG=0
fi
INFO=1


# helper functions
function __msg_error() {
    [[ "${ERROR}" == "1" ]] && echo -e "[ERROR]: $*"
}

function __msg_debug() {
    [[ "${DEBUG}" == "1" ]] && echo -e "[DEBUG]: $*"
}

function __msg_info() {
    [[ "${INFO}" == "1" ]] && echo -e "[INFO]: $*"
}

function check_command_present() {
  if ! [[ -x "$(command -v $1)" ]]; then
    __msg_error "$1 does not exists" >&2

    if [[ -n "$2" ]]; then
      __msg_error "$2"
    fi
    exit 1
  fi
}

function check_file_exists() {
  if ! [[ -f  "$1" ]]; then
    __msg_error "$1 does not exists" >&2
    exit 1
  else
    __msg_debug "$1 exists"
  fi
}
# main functions
function build_ff_enc_tool() {
  __msg_info "Building FF firmware Encryption tool"
  cd "${FF_ENC_DIR}"
  gcc main.c -o ff_fw_tool
  __msg_debug "...done"

  check_file_exists ff_fw_tool
  mv ff_fw_tool "${BUILD_DIR}/"

}

function backup_restore_config(){
   cd "${MARLIN_SOURCE_DIR}/Marlin"
  #backup
  if [[ $1 -eq 0 ]]; then
     cp  machine_config.h  machine_config.h.bkp
     cp  machine_config_adv.h machine_config_adv.h.bkp
     cp  Version.h Version.h.bkp
  # restore
  else
    mv  machine_config.h.bkp  machine_config.h
    mv  machine_config_adv.h.bkp machine_config_adv.h
    mv  Version.h.bkp Version.h
  fi
}

function generate_version() {
  __msg_info "Generating version file"
  cd ${BUILD_DIR}
  touch Version.h

  build_date=$(date +"%Y-%m-%d")
  current_version=$(git describe --tags --long)
  machine_name=""

  if [ ${PRINTER_TYPE} -eq "dreamer_nx" ]; then
      machine_name="Dreamer Nx"
  fi
  if [ ${PRINTER_TYPE} -eq "dreamer" ]; then
      machine_name="Dreamer"
  fi
  if [ ${PRINTER_TYPE} -eq "inventor" ]; then
      machine_name="Inventor"
  fi

  echo "#pragma once" >> Version.h
  echo \#define SHORT_BUILD_VERSION \"${MARLIN_VERSION}-${current_version}\" >> Version.h
  echo '#define DETAILED_BUILD_VERSION  "SHORT_BUILD_VERSION"'>> Version.h
  echo \#define STRING_DISTRIBUTION_DATE \"${build_date}\" >> Version.h
  echo '#define SOURCE_CODE_URL "https://github.com/tckb/FlashForge_Marlin"' >> Version.h
  echo '#define WEBSITE_URL "https://marlinfw.org"' >> Version.h
  echo \#define MACHINE_NAME \"FlashForge ${machine_name}\" >> Version.h
  echo \#define CUSTOM_MACHINE_NAME \"FlashForge ${machine_name}\" >> Version.h
}

function build_marlin() {
   __msg_info "Building Marlin firmware"
   backup_restore_config 0
   generate_version

   fw_file="${MARLIN_SOURCE_DIR}/.pio/build/FF_F407ZG/firmware.bin"

   cd "${MARLIN_SOURCE_DIR}/Marlin"
   cp "${CONFIG_FOLDER}/Configuration-${PRINTER_TYPE}.h"  machine_config.h
   cp "${CONFIG_FOLDER}/Configuration_adv-${PRINTER_TYPE}.h"  machine_config_adv.h


   cp ${BUILD_DIR}/Version.h Version.h

  if [ "${SWAP_EXTRUDER}" = true ]; then
     if [ "${PRINTER_TYPE}" == "inventor" ] || [ "${PRINTER_TYPE}" == "dreamer" ]; then
         cp "${CONFIG_FOLDER}/Configuration-${PRINTER_TYPE}-swap.h"  machine_config.h
    fi
  fi


  cd ${MARLIN_SOURCE_DIR}

  if [ $_arg_verbose = on ]
  then
     platformio run -e FF_F407ZG
  else
      platformio run -e FF_F407ZG --silent
  fi

  __msg_debug "...done"

  check_file_exists "$fw_file"
  mv "$fw_file" "${BUILD_DIR}/"

  # restore the backup
  backup_restore_config 1
}

function encrypt_firmware() {
  __msg_info "Encrypting firmware"
  cd "${BUILD_DIR}"

  ./ff_fw_tool -e -i "firmware.bin" -o "${FINAL_FW}"
}
function cleanup() {
  __msg_info "cleaning up"
   cd "${BUILD_DIR}"

   rm -f firmware.bin
   rm -f ff_fw_tool
   rm -f Version.h

   cd "${MARLIN_SOURCE_DIR}"
   platformio run --target clean -e FF_F407ZG --silent

}

function start_build_process() {
  __msg_info "Starting building process for ${PRINTER_TYPE}"
  mkdir -p "${BUILD_DIR}"

  check_command_present platformio "Head onto https://docs.platformio.org/en/latest/core/installation.html to install platformio"

  build_ff_enc_tool
  build_marlin
  encrypt_firmware

  __msg_debug "Ending building process"
  echo "--------------"
  __msg_info "Firmware should be available @ ${FINAL_FW}"
}

function flash_firmware() {
  __msg_info "Flashing ${FINAL_FW}"
  ${FLASHING_SCRIPT} ${FINAL_FW}
  __msg_info "Flashing completed.. Your printer will now reboot"
}

function main() {
  start_build_process
  if [ $_arg_flash = on ]
  then
     flash_firmware
  fi
  cleanup
}

# Run main
main

# ] <-- needed because of Argbash
